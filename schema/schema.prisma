// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Database: PostgreSQL on Neon.tech serverless
// Neon provides instant branching, autoscaling, and scale-to-zero for Postgres

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Direct connection for migrations (bypasses connection pooler)
}

// =============================================================================
// USER & AUTHENTICATION
// =============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  roles     String[] @default(["user"])

  // AWS Cognito Integration Fields
  cognitoId String?  @unique @map("cognito_id")
  cognitoUsername String? @map("cognito_username")

  // Current Learning Context
  currentCertificationId String? @map("current_certification_id")
  currentCertification   Certification? @relation("CurrentCertification", fields: [currentCertificationId], references: [id], onDelete: SetNull)

  studyPlanDuration Int? @map("study_plan_duration") // 30, 45, or 60 days

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  diagnostics       StudentDiagnostic[]
  learningPaths     StudentLearningPath[]
  progress          StudentProgress[]
  quizAttempts      StudentQuizAttempt[]
  flashcards        Flashcard[]
  practiceExams     PracticeExam[]
  videoCompletions  VideoCompletion[]
  pbqAttempts       PBQAttempt[]

  @@index([email])
  @@index([cognitoId])
  @@map("users")
}

// =============================================================================
// CERTIFICATION STRUCTURE
// =============================================================================

model Certification {
  id          String   @id @default(cuid())
  name        String   // e.g., "CompTIA Security+"
  code        String   // e.g., "SY0-701"
  description String?  @db.Text

  // Video Code Pattern (for auto-detection)
  videoCodePrefix String? @map("video_code_prefix") // e.g., "AISF", "SY7" - videos with codes starting with this will auto-link

  // Exam Configuration
  blueprint    Json?    // Uploaded exam blueprint structure

  // Scoring Configuration
  isScoredExam Boolean  @default(true) @map("is_scored_exam") // false = Pass/Fail only
  passingScore Int?     @map("passing_score") // e.g., 750 (null if Pass/Fail)
  maxScore     Int?     @map("max_score") // e.g., 900 (null if Pass/Fail)

  // Default Settings
  defaultStudyDuration Int @default(45) @map("default_study_duration") // days

  // Metadata
  isActive   Boolean  @default(true) @map("is_active")
  isArchived Boolean  @default(false) @map("is_archived")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relationships
  domains    CertificationDomain[]
  diagnostics StudentDiagnostic[]
  learningPaths StudentLearningPath[]
  currentStudents User[] @relation("CurrentCertification")
  videos     Video[] // Videos associated with this certification

  @@index([isActive])
  @@index([isArchived])
  @@index([code])
  @@map("certifications")
}

model CertificationDomain {
  id              String   @id @default(cuid())
  certificationId String   @map("certification_id")
  certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)

  name   String // e.g., "Threats, Attacks, and Vulnerabilities"
  weight Float  // Percentage weight on exam (e.g., 0.24 for 24%)
  order  Int    // Display order

  // AI Embedding Cache (for semantic search)
  embedding           Bytes?    // Vector embedding (1536 dimensions for text-embedding-3-small)
  embeddingUpdatedAt  DateTime? @map("embedding_updated_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  objectives CertificationObjective[]

  @@unique([certificationId, order])
  @@index([certificationId])
  @@map("certification_domains")
}

model CertificationObjective {
  id       String @id @default(cuid())
  domainId String @map("domain_id")
  domain   CertificationDomain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  code        String // e.g., "1.1", "2.3"
  description String @db.Text // Full objective text
  difficulty  String @default("intermediate") // "beginner", "intermediate", "advanced"
  order       Int    // Order within domain

  // AI Embedding Cache (for semantic search)
  embedding           Bytes?    // Vector embedding (1536 dimensions for text-embedding-3-small)
  embeddingUpdatedAt  DateTime? @map("embedding_updated_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  bullets       Bullet[]
  videoContentMappings VideoContentMapping[]
  documentContentMappings DocumentContentMapping[]
  questions     Question[]
  pbqs          PBQ[]
  progress      StudentProgress[]

  @@unique([domainId, code])
  @@index([domainId])
  @@index([difficulty])
  @@map("certification_objectives")
}

model Bullet {
  id          String @id @default(cuid())
  objectiveId String @map("objective_id")
  objective   CertificationObjective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  text  String @db.Text
  order Int    // Display order within objective

  // AI Embedding Cache (for semantic search)
  embedding           Bytes?    // Vector embedding (1536 dimensions for text-embedding-3-small)
  embeddingUpdatedAt  DateTime? @map("embedding_updated_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  subBullets SubBullet[]
  videoContentMappings VideoContentMapping[]
  documentContentMappings DocumentContentMapping[]

  @@unique([objectiveId, order])
  @@index([objectiveId])
  @@map("bullets")
}

model SubBullet {
  id       String @id @default(cuid())
  bulletId String @map("bullet_id")
  bullet   Bullet @relation(fields: [bulletId], references: [id], onDelete: Cascade)

  text  String @db.Text
  order Int    // Display order within bullet

  // AI Embedding Cache (for semantic search)
  embedding           Bytes?    // Vector embedding (1536 dimensions for text-embedding-3-small)
  embeddingUpdatedAt  DateTime? @map("embedding_updated_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  videoContentMappings VideoContentMapping[]
  documentContentMappings DocumentContentMapping[]

  @@unique([bulletId, order])
  @@index([bulletId])
  @@map("sub_bullets")
}

// =============================================================================
// CONTENT (Videos, Documents)
// =============================================================================

model Video {
  id          String @id @default(cuid())
  title       String
  videoCode   String? @map("video_code") // e.g., "AISF1", "SY7_01_01"
  description String? @db.Text

  // S3 Storage
  s3Key       String  @unique @map("s3_key") // S3 object key
  url         String // CloudFront/S3 public URL
  thumbnailUrl String? @map("thumbnail_url") // Thumbnail URL (auto or custom)
  thumbnailS3Key String? @map("thumbnail_s3_key") // Custom thumbnail S3 key

  // Transcription
  transcript  String? @db.Text
  transcriptionStatus String @default("pending") @map("transcription_status") // pending/processing/completed/failed/skipped
  transcriptionError  String? @db.Text @map("transcription_error") // Error message if failed
  aiDescriptionGenerated Boolean @default(false) @map("ai_description_generated") // Track if description was AI-generated

  // Closed Captions (VTT format for video player)
  captionsVttUrl    String? @map("captions_vtt_url")    // VTT file URL for CC
  captionsVttS3Key  String? @map("captions_vtt_s3_key") // VTT file S3 key

  // Metadata
  duration        Int? // Duration in seconds
  fileSize        Int? @map("file_size") // File size in bytes
  mimeType        String? @map("mime_type") // video/mp4, etc.
  difficultyLevel String @default("intermediate") @map("difficulty_level")

  // Certification association (optional - can be derived from videoCode)
  certificationId String? @map("certification_id")
  certification   Certification? @relation(fields: [certificationId], references: [id], onDelete: SetNull)

  // Upload tracking
  uploadedBy  String? @map("uploaded_by") // User ID who uploaded

  // Student settings
  allowDownload Boolean @default(true) @map("allow_download") // Can students download?

  // Content Status
  isProcessed Boolean @default(false) @map("is_processed") // Transcription complete
  isActive    Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  contentMappings VideoContentMapping[]
  completions     VideoCompletion[]

  @@index([certificationId])

  @@index([s3Key])
  @@index([uploadedBy])
  @@index([transcriptionStatus])
  @@index([isActive])
  @@index([difficultyLevel])
  @@map("videos")
}

// Flexible mapping table - links videos to any level of the hierarchy
// Only ONE of objectiveId, bulletId, or subBulletId should be populated
model VideoContentMapping {
  id      String @id @default(cuid())
  videoId String @map("video_id")
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  // Link to ANY level (only ONE will be populated)
  objectiveId String? @map("objective_id")
  bulletId    String? @map("bullet_id")
  subBulletId String? @map("sub_bullet_id")

  objective   CertificationObjective? @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  bullet      Bullet?                 @relation(fields: [bulletId], references: [id], onDelete: Cascade)
  subBullet   SubBullet?              @relation(fields: [subBulletId], references: [id], onDelete: Cascade)

  // Mapping Metadata
  isPrimary      Boolean @default(false) @map("is_primary") // Is this the primary content for this video?
  confidence     Float   @default(1.0)  // AI confidence score (0.0-1.0, 1.0 for manual)
  mappingSource  String  @default("manual") @map("mapping_source") // "ai_suggested" | "ai_confirmed" | "manual"

  createdAt DateTime @default(now()) @map("created_at")

  @@index([videoId])
  @@index([objectiveId])
  @@index([bulletId])
  @@index([subBulletId])
  @@index([mappingSource])
  @@map("video_content_mappings")
}

model Document {
  id          String @id @default(cuid())
  title       String
  description String? @db.Text

  // S3 Storage
  s3Key       String  @unique @map("s3_key") // S3 object key
  url         String // S3 URL for PDF/document
  type        String // "pdf", "docx", "txt"

  // Metadata
  fileSize    Int? @map("file_size") // File size in bytes
  mimeType    String? @map("mime_type") // application/pdf, etc.
  version     Int @default(1) // Document versioning
  difficultyLevel String @default("intermediate") @map("difficulty_level") // beginner, intermediate, advanced
  aiDescriptionGenerated Boolean @default(false) @map("ai_description_generated") // Track if description was AI-generated

  // Upload tracking
  uploadedBy  String? @map("uploaded_by") // User ID who uploaded

  // Student settings
  allowDownload Boolean @default(true) @map("allow_download") // Can students download?

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  contentMappings DocumentContentMapping[]

  @@index([s3Key])
  @@index([uploadedBy])
  @@index([type])
  @@index([isActive])
  @@index([difficultyLevel])
  @@map("documents")
}

model DocumentContentMapping {
  id      String @id @default(cuid())
  documentId String @map("document_id")
  document   Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // Link to ANY level (only ONE will be populated)
  objectiveId String? @map("objective_id")
  bulletId    String? @map("bullet_id")
  subBulletId String? @map("sub_bullet_id")

  objective   CertificationObjective? @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  bullet      Bullet?                 @relation(fields: [bulletId], references: [id], onDelete: Cascade)
  subBullet   SubBullet?              @relation(fields: [subBulletId], references: [id], onDelete: Cascade)

  // Mapping Metadata
  isPrimary      Boolean @default(false) @map("is_primary") // Is this the primary content for this document?
  confidence     Float   @default(1.0)  // AI confidence score (0.0-1.0, 1.0 for manual)
  mappingSource  String  @default("manual") @map("mapping_source") // "ai_suggested" | "ai_confirmed" | "manual"

  createdAt DateTime @default(now()) @map("created_at")

  @@index([documentId])
  @@index([objectiveId])
  @@index([bulletId])
  @@index([subBulletId])
  @@index([mappingSource])
  @@map("document_content_mappings")
}

// =============================================================================
// QUESTIONS & ASSESSMENTS
// =============================================================================

model Question {
  id          String @id @default(cuid())
  type        String // "multiple_choice", "multiple_select", "scenario"
  difficulty  String // "easy", "medium", "hard"

  // Question Content
  text        String @db.Text
  choices     Json   // Array of choice objects
  correctAnswer String @map("correct_answer") // JSON array for multiple_select
  explanation String @db.Text

  // Categorization
  objectiveId String @map("objective_id")
  objective   CertificationObjective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  // Question Type Tag (from Chapter 5)
  questionType String? @map("question_type") // "scenario", "recall", "best_practice", "exception", "calculation", "sequence", "application"

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  quizAttempts StudentQuizAttempt[]

  @@index([objectiveId])
  @@index([difficulty])
  @@index([questionType])
  @@index([isActive])
  @@map("questions")
}

model PBQ {
  id          String @id @default(cuid())
  type        String // "firewall", "logs", "drag_drop", "image_labeling"
  title       String

  objectiveId String @map("objective_id")
  objective   CertificationObjective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  config        Json // Configuration for the PBQ (varies by type)
  scoringRubric Json @map("scoring_rubric") // How to score the attempt

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  attempts PBQAttempt[]

  @@index([objectiveId])
  @@index([type])
  @@index([isActive])
  @@map("pbqs")
}

// =============================================================================
// STUDENT PROGRESS & LEARNING PATH
// =============================================================================

model StudentDiagnostic {
  id              String @id @default(cuid())
  studentId       String @map("student_id")
  student         User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  certificationId String @map("certification_id")
  certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)

  // Scores
  overallScore  Float         @map("overall_score") // Overall percentage
  domainScores  Json          @map("domain_scores") // Object with domain-level scores

  // Results
  completedAt DateTime       @map("completed_at")
  createdAt   DateTime       @default(now()) @map("created_at")

  @@index([studentId])
  @@index([certificationId])
  @@index([completedAt])
  @@map("student_diagnostics")
}

model StudentLearningPath {
  id          String @id @default(cuid())
  studentId   String @map("student_id")
  student     User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  certificationId String @map("certification_id")
  certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)

  // Learning Path Configuration
  skippedObjectives   String[] @map("skipped_objectives") // ObjectiveIds student can skip
  priorityObjectives  String[] @map("priority_objectives") // ObjectiveIds requiring focus

  estimatedCompletionDate DateTime? @map("estimated_completion_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([studentId, certificationId])
  @@index([studentId])
  @@index([certificationId])
  @@map("student_learning_paths")
}

model StudentProgress {
  id          String @id @default(cuid())
  studentId   String @map("student_id")
  student     User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  objectiveId String @map("objective_id")
  objective   CertificationObjective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  // Progress Status
  status         String   @default("not_started") // "not_started", "in_progress", "completed", "mastered"

  // Performance Metrics
  quizScores     Json?    @map("quiz_scores") // Array of quiz attempt scores
  videoCompletionIds String[] @map("video_completion_ids") // Video IDs completed for this objective

  lastAccessed DateTime? @map("last_accessed")
  completedAt  DateTime? @map("completed_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([studentId, objectiveId])
  @@index([studentId])
  @@index([objectiveId])
  @@index([status])
  @@map("student_progress")
}

model VideoCompletion {
  id        String @id @default(cuid())
  studentId String @map("student_id")
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  videoId   String @map("video_id")
  video     Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  // Completion Tracking
  watchedSeconds Int       @map("watched_seconds") // How much was watched
  completed      Boolean   @default(false) // Watched >90% of video

  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  @@unique([studentId, videoId])
  @@index([studentId])
  @@index([videoId])
  @@map("video_completions")
}

model StudentQuizAttempt {
  id         String @id @default(cuid())
  studentId  String @map("student_id")
  student    User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  questionId String @map("question_id")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Attempt Data
  score      Float // 0.0 to 1.0
  answers    Json  // User's answers
  errorTypes Json? @map("error_types") // "knowledge_gap", "misreading", "logic_error"

  attemptedAt DateTime @default(now()) @map("attempted_at")

  @@index([studentId])
  @@index([questionId])
  @@index([attemptedAt])
  @@map("student_quiz_attempts")
}

model PBQAttempt {
  id        String @id @default(cuid())
  studentId String @map("student_id")
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  pbqId     String @map("pbq_id")
  pbq       PBQ    @relation(fields: [pbqId], references: [id], onDelete: Cascade)

  // Attempt Data
  score    Float // 0.0 to 1.0
  response Json  // User's configuration/answer

  completedAt DateTime @default(now()) @map("completed_at")

  @@index([studentId])
  @@index([pbqId])
  @@map("pbq_attempts")
}

// =============================================================================
// SPACED REPETITION & PRACTICE
// =============================================================================

model Flashcard {
  id          String @id @default(cuid())
  studentId   String @map("student_id")
  student     User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  objectiveId String @map("objective_id")

  // Flashcard Content
  front String @db.Text
  back  String @db.Text

  // Spaced Repetition (1-3-7-14-21 day cycle)
  nextReviewDate   DateTime @map("next_review_date")
  difficultyRating Int      @default(3) @map("difficulty_rating") // 1-5 scale
  reviewCount      Int      @default(0) @map("review_count")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([studentId])
  @@index([nextReviewDate])
  @@map("flashcards")
}

model PracticeExam {
  id        String @id @default(cuid())
  studentId String @map("student_id")
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Exam Results
  score            Float   // Overall score
  domainBreakdown  Json    @map("domain_breakdown") // Score by domain
  readinessScore   Float?  @map("readiness_score") // Predicted pass probability

  // Exam Metadata
  examType   String @default("weekly") @map("exam_type") // "diagnostic", "weekly", "final"

  completedAt DateTime @default(now()) @map("completed_at")

  @@index([studentId])
  @@index([completedAt])
  @@index([examType])
  @@map("practice_exams")
}

// =============================================================================
// FILE STORAGE (S3 Tracking)
// =============================================================================

model File {
  id       String @id @default(cuid())
  key      String @unique // S3 object key (e.g., "dev/videos/intro.mp4")
  url      String // Full S3 URL

  // File Metadata
  fileName    String  @map("file_name") // Original file name
  fileSize    Int     @map("file_size") // Size in bytes
  mimeType    String  @map("mime_type") // e.g., "video/mp4", "application/pdf"
  category    String  // "videos", "pdfs", "images", "thumbnails"

  // Reference Tracking (prevents orphaned files)
  referencedBy   String? @map("referenced_by") // ID of parent resource (e.g., video_id, document_id)
  referenceType  String? @map("reference_type") // Type of parent resource (e.g., "video", "document", "thumbnail")

  // Timestamps
  uploadedBy String? @map("uploaded_by") // User ID who uploaded
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([key])
  @@index([referencedBy])
  @@index([referenceType])
  @@index([category])
  @@map("files")
}

// =============================================================================
// AI MODELS
// =============================================================================

model AIModel {
  id          String   @id @default(cuid())
  name        String   // Display name e.g., "Claude 3.5 Sonnet"
  modelId     String   @unique @map("model_id") // API model ID e.g., "claude-3-5-sonnet-20241022"
  provider    String   // "anthropic", "openai", etc.
  description String?  @db.Text

  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([provider])
  @@index([isActive])
  @@map("ai_models")
}

// =============================================================================
// RELATIONSHIPS NOTE
// =============================================================================
// All models include proper cascading deletes:
// - Deleting a Certification cascades to Domains, which cascade to Objectives
// - Deleting a User cascades to all their progress, attempts, and flashcards
// - Deleting content (Videos, Questions) cascades to related mappings and attempts
// - Files are tracked independently to prevent orphans during replacements

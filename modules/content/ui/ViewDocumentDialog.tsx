"use client";

/**
 * ViewDocumentDialog Component
 *
 * Modal dialog for viewing document metadata (read-only)
 */

import { useState, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { getDocument, generateDocumentDownloadUrl } from "../serverActions/document.action";
import { Eye, Loader2, FileText, Download } from "lucide-react";
import { formatDistanceToNow } from "date-fns";
import { toast } from "sonner";

interface ViewDocumentDialogProps {
  documentId: string;
  documentTitle: string;
  trigger?: React.ReactNode;
}

export function ViewDocumentDialog({
  documentId,
  documentTitle,
  trigger,
}: ViewDocumentDialogProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [document, setDocument] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (isOpen && !document) {
      loadDocument();
    }
  }, [isOpen]);

  const loadDocument = async () => {
    setIsLoading(true);
    try {
      const result = await getDocument({ id: documentId });
      if (result.success && result.data) {
        setDocument(result.data);
      }
    } catch (error) {
      console.error("Failed to load document:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(2)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        {trigger || (
          <Button variant="ghost" size="icon">
            <Eye className="h-4 w-4" />
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="max-w-lg">
        <DialogHeader>
          <DialogTitle>{documentTitle}</DialogTitle>
        </DialogHeader>

        {isLoading ? (
          <div className="flex items-center justify-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
          </div>
        ) : document ? (
          <div className="space-y-6">
            {/* Document Icon and Type */}
            <div className="flex items-center gap-4">
              <div className="flex h-16 w-16 items-center justify-center rounded-lg bg-primary/10">
                <FileText className="h-8 w-8 text-primary" />
              </div>
              <div className="flex-1">
                <div className="flex items-center gap-2">
                  <Badge variant="secondary">{document.type.toUpperCase()}</Badge>
                  <span className="text-sm text-muted-foreground">
                    Version {document.version}
                  </span>
                </div>
              </div>
            </div>

            {/* Metadata Fields */}
            <div className="space-y-4">
              {/* Description */}
              <div className="space-y-2">
                <Label>Description</Label>
                <div className="rounded-lg border p-3 bg-muted/50 min-h-[80px]">
                  <p className="text-sm whitespace-pre-wrap">
                    {document.description || "No description provided"}
                  </p>
                </div>
                {document.aiDescriptionGenerated && (
                  <p className="text-xs text-muted-foreground">
                    Generated by AI
                  </p>
                )}
              </div>

              {/* File Information */}
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-1">
                  <Label className="text-muted-foreground">File Size</Label>
                  <p className="text-sm font-medium">
                    {formatFileSize(document.fileSize)}
                  </p>
                </div>
                <div className="space-y-1">
                  <Label className="text-muted-foreground">Downloads</Label>
                  <p className="text-sm font-medium">
                    {document.allowDownload ? "Allowed" : "Disabled"}
                  </p>
                </div>
              </div>

              {/* Timestamps */}
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-1">
                  <Label className="text-muted-foreground">Created</Label>
                  <p className="text-sm">
                    {formatDistanceToNow(new Date(document.createdAt), {
                      addSuffix: true,
                    })}
                  </p>
                </div>
                <div className="space-y-1">
                  <Label className="text-muted-foreground">Updated</Label>
                  <p className="text-sm">
                    {formatDistanceToNow(new Date(document.updatedAt), {
                      addSuffix: true,
                    })}
                  </p>
                </div>
              </div>

              {/* Content Mappings */}
              <div className="space-y-1">
                <Label className="text-muted-foreground">
                  Objective Mappings
                </Label>
                <p className="text-sm font-medium">
                  {document.contentMappings?.length || 0} mapping(s)
                </p>
              </div>

              {/* Download Button */}
              {document.allowDownload && (
                <Button
                  className="w-full"
                  variant="outline"
                  onClick={async () => {
                    try {
                      const result = await generateDocumentDownloadUrl(documentId);
                      if (result.success && result.data) {
                        window.open(result.data, "_blank");
                      } else {
                        toast.error(result.error || "Failed to generate download URL");
                      }
                    } catch (error) {
                      toast.error("Failed to download document");
                      console.error("Download error:", error);
                    }
                  }}
                >
                  <Download className="mr-2 h-4 w-4" />
                  Download File
                </Button>
              )}
            </div>
          </div>
        ) : (
          <p className="text-center text-muted-foreground py-12">
            Failed to load document
          </p>
        )}
      </DialogContent>
    </Dialog>
  );
}
